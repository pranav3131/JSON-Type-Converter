@{
    ViewBag.Title = "Class/Model Details";
}

<h3>Enter the Class/Model name:</h3>

<!-- Input the class/Model name in the input text box -->
<div class="input-group">
    <input type="text" id="classname" placeholder="Enter the class/model name" class="input-textbox" />
    <button type="button" id="getclassinfo" class="input-button">Get Class Details</button>
</div>


<!-- Area to display the properties and methods -->
<div id="classinfo">
    <h3>Properties</h3>
    <ul id="propertieslist"></ul> <!-- ids acting as a placeholder to populate the respective data -->

</div>


<!-- Button to generate JSON -->
<button type="button" class="input-button" id="generateJSON">Generate JSON</button>


<!-- Area to display the JSON Objects -->
<div id="JSONoutput">
    <h3>JSON Representation</h3>
    <pre id="JSONcontent"></pre> <!-- pre tag is used as pre-formatting tag, used for specifically monospace font => JSON object easy to read -->
</div>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>


<script type="text/javascript">

    $(document).ready(function () { /* JQuery function which checks and loads document before executing the functions */

        $('#theme-toggle').change(function () {    //Js code to handle dark switch functionality
            $('body').toggleClass('dark-mode');
        });


        // Function to handle the "getclassinfo" button click
        $("#getclassinfo").click(function () {
            var classname = $("#classname").val(); // Value of the class name gets stored in variable "classname"

            // AJAX Function => sends requests to server and receives response without reloading the entire webpage
            $.ajax({
                url: '@Url.Action("getclassinfo","JSONType")', /* url.action is helper class which points to the server endpoint of the action name and controller name */
                type: 'GET', // HTTP method

                data: { classname: classname },

                success: function (data) {
                    // Clear previous data
                    if (data.ClassName) {
                        $("#propertieslist").empty();



                        // Populate Properties with input fields for values
                        $.each(data.Properties, function (index, prop) {
                            var inputfield = '';
                            if (prop.Type === 'String') {
                                inputfield = '<input type="text" class="input-textbox" name="' + prop.name + '" />' +
                                           '<span class="validation-message" data-name="' + prop.name + '"></span>';

                            }
                            else if (prop.Type === 'DateTime') {
                                inputfield = '<input type="date" class="input-textbox" name="' + prop.name + '"/>' +
                                '<span class="validation-message" data-name="' + prop.name + '"></span>';
                            }
                            else if (prop.Type === 'Double') {
                                inputfield = '<select class="input-dropdown" name="' + prop.name + '">' +
                                    '<option value="0-50000">0-50000</option>' +
                                    '<option value="50001-100000">50001-100000</option>' +
                                    '<option value="100001-150000">100001-150000</option></select>' +
                                '<span class="validation-message" data-name="' + prop.name + '"></span>';
                            }
                            else if (prop.Type === 'Boolean') {
                                inputfield = '<input type="radio" name="' + prop.name + '" value="true"> True ' +
                                    '<input type="radio" name="' + prop.name + '" value="false"> False' +
                                '<span class="validation-message" data-name="' + prop.name + '"></span>';
                            }

                            $("#propertieslist").append('<li>' + prop.name + ':' + prop.Type + ' ' + inputfield + '</li>');
                        });

                        // Clear JSON output if any
                        $("#JSONcontent").text('');
                    } else {
                        alert("Class not found.");
                    }
                },
                error: function () {
                    alert("An error occurred while retrieving class details.");
                }
            });
        });


        // Function to handle the "generateJSON" button click
        $("#generateJSON").click(function () {
            var classname = $("#classname").val();
            var names = [];
            var types = [];
            var values = [];

            // Collect property names, types, and values from input fields
            $("#propertieslist li").each(function () {
                var propName = $(this).find("input, select").attr("name");
                var propType = $(this).text().split(':')[1].trim().split(' ')[0];
                var propValue = $(this).find("input:checked, input[type='text'], input[type='date'], select").val();


                if (propName) {
                    names.push(propName);
                    types.push(propType);
                    values.push(propValue);
                }
            });

            // Display validation messages
            $("#propertieslist li").each(function () {
                var propName = $(this).find("input, select").attr("name");
                var propValue = $(this).find("input:checked, input[type='text'], input[type='date'], select").val();
                var $validationMessage = $(this).find('.validation-message');

                if (!propValue) {
                    $validationMessage.text('This field is optional but empty.');
                } else {
                    $validationMessage.text(''); // Clear validation message if field is not empty
                }
            });

            // AJAX request to generate the final JSON with property values
            $.ajax({
                url: '@Url.Action("GenerateJSON", "JSONType")',
                type: 'POST',
                data: { classname: classname, names: names, types: types, values: values },
                traditional: true, // Allow sending arrays in the data
                success: function (jsonData) {
                    // Display the generated JSON data
                    var jsonString = JSON.stringify(jsonData, null, 4);
                    $("#JSONcontent").text(jsonString);
                },
                error: function () {
                    alert("An error occurred while generating the JSON.");
                }
            });

        });
    });
</script>

